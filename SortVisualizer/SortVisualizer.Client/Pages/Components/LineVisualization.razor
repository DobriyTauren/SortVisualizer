@rendermode InteractiveWebAssembly

<link rel="stylesheet" type="text/css" href="css/beda.css?version=0.2">

<div class="main-container">
    <div class="sort-block-container">
        <div class="container">
            <div class="row">
                <div class="col-sm mb-2 mx-2 bg-primary bg-gradient rounded border border-info">
                    <p class="text-light text-center my-auto">Обращений к массиву: @Algorithm.ArrayAccessCount</p>
                </div>
                <div class="col mb-2 mx-2 bg-primary bg-gradient rounded border border-info">
                    <p class="text-light text-center my-auto">Перестановок: @Algorithm.SwapCount</p>
                </div>
                <div class="col mb-2 mx-2 bg-primary bg-gradient rounded border border-info">
                    <p class="text-light text-center my-auto">Сравнений: @Algorithm.CompareCount </p>
                </div>
            </div>
        </div>


        <svg width="100%" height="310" class="mx-2">
            @foreach (var line in _arrayElements)
            {
                <line class="line" x1="@_generator.CalculatePercentage(line.StartPoint.X)" y1="@line.StartPoint.Y" x2="@_generator.CalculatePercentage(line.EndPoint.X)" y2="@line.EndPoint.Y" stroke-width="@($"{_generator.LineWidthPercentage}%")" stroke="@line.Color">
                </line>
            }
        </svg>

        <div class="row btn-container">
            <div class="col-auto">
                <button class="btn btn-primary" @onclick="GenerateArray" disabled="@_isSorting">Сгенерировать</button>
            </div>
            <div class="col-auto mb-2">
                <button class="btn btn-primary" @onclick="SortArray" disabled="@(_isEmpty || _isSorting)">Сортировать</button>
            </div>
            
            <div class="col-auto pt-2">
                <p class="text-light text-center">Задержка (мс)</p>>
            </div>
            <div class="col-3 mb-2 w-7">
                <input @bind="Algorithm.Delay" disabled="@_isSorting" type="text" class="form-control" id="inlineFormInputGroup" placeholder="Задержка">
            </div>
            
            <div class="col-auto pt-2">
                <p class="text-light text-center">Элементов</p>>
            </div>
            <div class="col-3 mb-2 w-7">
                <input @bind="@_generator.ItemsCount" disabled="@_isSorting" type="text" class="form-control" id="inlineFormInputGroup" placeholder="Элементов">
            </div>
        </div>
    </div>
</div>


@code
{
    [Inject]
    private IJSRuntime JSRuntime { get; set; }
    
    [Parameter]
    public SortAlgorithm Algorithm { get; set; }

    private Generator _generator = new Generator();

    private List<SvgLine> _arrayElements = new List<SvgLine>();

    private bool _isSorting = false;
    private bool _isEmpty = true;

    protected override void OnInitialized()
    {
        Algorithm.SortService.StyleChanged += HandleStateChanged;
    }

    private async Task GenerateArray()
    {
        _arrayElements.Clear();

        _generator.ContainerWidth = await JSRuntime.InvokeAsync<int>("svgInterop.getSvgWidth", 0);

        _arrayElements = _generator.GenerateLines();

        _isEmpty = false;
    }

    private async Task SortArray()
    {
        _isSorting = true;

        await Algorithm.Sort(_arrayElements);

        _isSorting = false;
        StateHasChanged();
    }

    private void HandleStateChanged(object sender, EventArgs e)
    {
        StateHasChanged(); // обновление состояния компонента
    }
}