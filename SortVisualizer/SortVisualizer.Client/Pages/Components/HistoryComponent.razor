@rendermode InteractiveWebAssembly
@inject IJSRuntime JSRuntime
@inject UserDataStorage userData

<div class="block-bg-color mt-3 p-3 bdr">
    <table class="table table-hover table-dark">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Алгоритм</th>
                <th scope="col">Обращений</th>
                <th scope="col">Перемещений</th>
                <th scope="col">Время</th>
                <th scope="col">Задержка</th>
                <th scope="col">Элементов</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < userData.UserHistories.Count; i++)
            {
                <tr>
                    <th scope="row">@(i + 1)</th>
                    <td>@(userData.Algorithms.FirstOrDefault(a => a.Id == userData.UserHistories[i].AlgorithmId).Name)</td>
                    <td>@userData.UserHistories[i].ArrayAccessCount</td>
                    <td>@userData.UserHistories[i].MoveCount</td>
                    <td>@userData.UserHistories[i].TimeWasted</td>
                    <td>@userData.UserHistories[i].Delay</td>
                    <td>@userData.UserHistories[i].ElementsCount</td>
                </tr>
            }
            
        </tbody>
    </table>
</div>

@code 
{
    private SaveAPI _saveAPI;
    private string _userId;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _userId = await userData.GetUserId(JSRuntime);
            _saveAPI = new SaveAPI(userData);
            await _saveAPI.GetHistory(_userId);

            userData.DataChanged += HandleStateChanged;

            StateHasChanged();
        }
    }

    private void HandleStateChanged(object sender, EventArgs e)
    {
        StateHasChanged();
    }
}