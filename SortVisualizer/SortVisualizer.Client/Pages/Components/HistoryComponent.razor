@using Blazored.LocalStorage

@inject IJSRuntime JSRuntime
@inject ILocalStorageService localStorage
@inject IndexedDB indexDB
@inject UserDataStorage userData

@rendermode InteractiveWebAssembly

@if (_histories.Count > 0)
{
    <div class="block-bg-color p-3 bdr">
        <div class="table-responsive">
            <table class="table table-hover table-dark">
                <thead>
                    <tr>
                        <th scope="col">#</th>
                        <th scope="col">Алгоритм</th>
                        <th scope="col">Тип</th>
                        <th scope="col">Обращений</th>
                        <th scope="col">Перемещений</th>
                        <th scope="col">Время</th>
                        <th scope="col">Задержка</th>
                        <th scope="col">Элементов</th>
                    </tr>
                </thead>
                <tbody>
                    @if (userData.Algorithms.Count != 0)
                    {
                        for (int i = 0; i < _histories.Count; i++)
                        {
                            var algorithm = userData.Algorithms.FirstOrDefault(a => a.Id == _histories[i].AlgorithmId);
                            var history = _histories[i];

                            <tr @onclick="() => SelectRow(history)" class="@((IsRowSelected(history) && !IsHistorySmall) ? "table-active" : "") table-hover">
                                <th scope="row">@(i + 1)</th>
                                <td>@(algorithm != null ? algorithm.Name : "Неизвестный")</td>
                                <td>
                                    @if (history.VisualizationType == VisualizationType.Line)
                                    {
                                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="white" class="bi bi-file-bar-graph" viewBox="0 0 16 16">
                                            <path d="M4.5 12a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5zm3 0a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5zm3 0a.5.5 0 0 1-.5-.5v-6a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-.5.5z" />
                                            <path d="M4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zm0 1h8a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1" />
                                        </svg>
                                    }
                                    else
                                    {
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="white" class="bi bi-circle" viewBox="0 0 16 16">
                                            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16" />
                                        </svg>
                                    }
                                </td>
                                <td>@history.ArrayAccessCount</td>
                                <td>@history.MoveCount</td>
                                <td>@history.TimeWasted</td>
                                <td>@($"{history.Delay} мс")</td>
                                <td>@history.ElementsCount</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@if (isModalVisible)
{
    <ModalComponent Title="Невозможно отобразить историю!" Ok="@null" Cancel="Понятно" OnClose="HandleModalClose">
        <Body>
            <p>Ваша история сортировок пока пуста, воспользуйтесь одним из алгоритмов сортировки данных.</p>
        </Body>
    </ModalComponent>
}

@code
{
    #region modal window

    private bool isModalVisible = false;

    private void ShowModal()
    {
        isModalVisible = true;
    }

    private async Task HandleModalClose(bool result)
    {
        isModalVisible = false;

        await NavigateBack();
    }

    #endregion

    [Parameter]
    public bool IsHistorySmall { get; set; }

    private List<HistoryModel> _histories = new List<HistoryModel>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await indexDB.LoadObjects(localStorage);

            userData.FilteredHistoryChanged += HandleFilteredChanged;
            userData.HistoryChanged += HandleStateChanged;
            userData.AlgorithmsChanged += HandleStateChanged;

            if (IsHistorySmall)
            {
                userData.SetSmallHistory(indexDB.ObjectManager.History);
                _histories = userData.SmallHistory;
            }
            else
            {
                userData.SetFullHistory(indexDB.ObjectManager.History);
                userData.SetFilteredHistory(indexDB.ObjectManager.History);
                _histories = userData.FilteredHistory;

                if (_histories.Count == 0)
                {
                    ShowModal();
                }
            }

            StateHasChanged();
        }
    }

    private void SelectRow(HistoryModel history)
    {
        if (IsRowSelected(history))
        {
            userData.DeleteSelectedRecord(history);
        }
        else
        {
            userData.AddToSelected(history);
        }
    }

    private bool IsRowSelected(HistoryModel history)
    {
        return userData.SelectedHistory.Contains(history);
    }

    private void HandleFilteredChanged(object sender, EventArgs e)
    {
        _histories = userData.FilteredHistory;

        StateHasChanged();
    }

    private void HandleStateChanged(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    private async Task NavigateBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }
}
