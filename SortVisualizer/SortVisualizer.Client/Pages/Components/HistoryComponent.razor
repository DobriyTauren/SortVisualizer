@rendermode InteractiveWebAssembly
@inject IJSRuntime JSRuntime
@inject UserDataStorage userData

<div class="block-bg-color mt-3 p-3 bdr">
    <table class="table table-hover table-dark">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Алгоритм</th>
                <th scope="col">Обращений</th>
                <th scope="col">Перемещений</th>
                <th scope="col">Время</th>
                <th scope="col">Задержка</th>
                <th scope="col">Элементов</th>
            </tr>
        </thead>
        <tbody>
            @if (userData.Algorithms.Count != 0)
            {
                for (int i = 0; i < userData.UserHistories.Count; i++)
                {
                    var algorithm = userData.Algorithms.FirstOrDefault(a => a.Id == userData.UserHistories[i].AlgorithmId);
                    var history = userData.UserHistories[i];

                    <tr>
                        <th scope="row">@(i + 1)</th>
                        <td>@(algorithm != null ? algorithm.Name : "Неизвестный")</td>
                        <td>@history.ArrayAccessCount</td>
                        <td>@history.MoveCount</td>
                        <td>@history.TimeWasted</td>
                        <td>@history.Delay</td>
                        <td>@history.ElementsCount</td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code
{
    private SaveAPI _saveAPI;
    private string _userId;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _userId = await userData.GetUserId(JSRuntime);
            _saveAPI = new SaveAPI(userData);
            await _saveAPI.TryGetHistory(_userId);

            userData.HistoryChanged += HandleStateChanged;
            userData.AlgorithmsChanged += HandleStateChanged;

            StateHasChanged();
        }
    }

    private void HandleStateChanged(object sender, EventArgs e)
    {
        StateHasChanged();
    }
}