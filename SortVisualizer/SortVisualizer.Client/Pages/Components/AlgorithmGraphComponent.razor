@using Blazored.LocalStorage

@inject IJSRuntime JSRuntime
@inject UserDataStorage userData
@inject ILocalStorageService localStorage
@inject IndexedDB indexDB

@rendermode InteractiveWebAssembly

<div class="secondary-block-bg-color statistics-block mb-3 bdr" id="chart-container">
    
</div>

<div class="row m-auto justify-content-center">
    <button @onclick="RenderAllTypesHistory" class="mx-1 w-30-fixed btn">
        Все типы
    </button>

    <button @onclick="async () => await RenderHistoryByType(VisualizationType.Line)" class="mx-1 w-30-fixed btn">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="white" class="bi bi-file-bar-graph" viewBox="0 0 16 16">
            <path d="M4.5 12a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5zm3 0a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5zm3 0a.5.5 0 0 1-.5-.5v-6a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-.5.5z" />
            <path d="M4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zm0 1h8a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1" />
        </svg>
    </button>

    <button @onclick="async () => await RenderHistoryByType(VisualizationType.Circle)" class="mx-1 w-30-fixed btn">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="white" class="bi bi-circle" viewBox="0 0 16 16">
            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16" />
        </svg>
    </button>
</div>

<style>
    .statistics-block {
/*         max-height: 100% !important;
        aspect-ratio: 1/1; */

        height: 90%;
        width: 100%;
    }
</style>

@if (isModalVisible)
{
    <ModalComponent Title="Невозможно построить графики!" Ok="@null" Cancel="Понятно" OnClose="HandleModalClose">
        <Body>
            <p>Ваша история сортировок пока пуста, воспользуйтесь одним из алгоритмов сортировки данных.</p>
        </Body>
    </ModalComponent>
}

@code 
{
    #region modal window

    private bool isModalVisible = false;

    private void ShowModal()
    {
        isModalVisible = true;
    }

    private async Task HandleModalClose(bool result)
    {
        isModalVisible = false;

        NavigateBack();
    }

    #endregion

    APIHandler _api = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _api.CheckForAlgorithms(userData);

            await indexDB.LoadObjects(localStorage);

            await RenderAllTypesHistory();

            if (indexDB.ObjectManager.History.Count == 0)
            {
                ShowModal();

                StateHasChanged();
            }
        }
    }

    private async Task RenderAllTypesHistory()
    {
        var history = indexDB.ObjectManager.History;

        var groupedHistories = history
                  .GroupBy(h => h.AlgorithmId)
                  .Select(group => group.ToList())
                  .OrderBy(group => group.First().AlgorithmId) // Сортируем по AlgorithmId
                  .ToList();

        var algorithmIds = groupedHistories.Select(group => group.First().AlgorithmId).ToList();

        var filteredNames = userData.Algorithms
                .Where(a => algorithmIds.Contains(a.Id))
                .Select(a => a.Name).ToList();

        await RenderCharts(groupedHistories, filteredNames);
    }

    private async Task RenderHistoryByType(VisualizationType type)
    {
        var history = indexDB.ObjectManager.History;

        history = history.Where(h => h.VisualizationType == type).ToList();

        var groupedHistories = history
                  .GroupBy(h => h.AlgorithmId)
                  .Select(group => group.ToList())
                  .OrderBy(group => group.First().AlgorithmId) // Сортируем по AlgorithmId
                  .ToList();

        // Извлекаем уникальные идентификаторы алгоритмов из groupedHistories
        var algorithmIds = groupedHistories.Select(group => group.First().AlgorithmId).ToList();

        var filteredNames = userData.Algorithms
                .Where(a => algorithmIds.Contains(a.Id))
                .Select(a => a.Name).ToList();

        await RenderCharts(groupedHistories, filteredNames);
    }

    private async Task RenderCharts(object histories, object algorithmNames)
    {
        await JSRuntime.InvokeVoidAsync("renderCharts", histories, algorithmNames);
    }

    private async Task NavigateBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }
}
